---
title: "Datverkenning gladde slang"
format: html
editor: source
author: "Toon Westra"
date: "2025-07-22"
toc: true
number-sections: true
code-fold: true
lang: nl
execute:
  echo: false
  warning: false
---

```{r}
#|label: "setup"  
#|output: false

library(tidyverse)
library(INBOtheme)
library(sf)
library(leaflet)
library(DT)
library(units)
library(n2khab)
conflicted::conflicts_prefer(dplyr::filter)
```

## Data

De data bevindt zich in [deze google drive folder](https://drive.google.com/drive/folders/150Os04BluF3xMnfy6reOJR7jKltrhVr8):

-   `DumpGladdeSlang_alles_december2024.shp`: waarnemingen gladde slang
-   `Gladde_Slang_Gebieden_2024.shp`: gebieden in meetnet en inhaalslag
-   `LocatieSlangenplaten2024.shp`: locatie slangenplaten

```{r}
#| label: read-data

path_google_drive <- "G:/Mijn Drive/Soortenmeetnetten/Oplevering data/2024/Data niet in Meetnetten.be/Gladde Slang - Oplevering data Meetnetten 2024"

wnm_orig <- st_read(file.path(path_google_drive, "DumpGladdeSlang_alles_december2024.shp"),
                    quiet = TRUE)

wnm_eff_orig <- st_read(file.path(path_google_drive, "DumpGladdeSlang_alles_december2024_Effectwrn.shp"),
                    quiet = TRUE)

gebieden_orig <- st_read(file.path(path_google_drive, "Gladde_Slang_Gebieden_2024.shp"),
                    quiet = TRUE)

platen_orig <- st_read(file.path(path_google_drive, "LocatieSlangenplaten2024.shp"),
                    quiet = TRUE)

vlaanderen <- read_admin_areas(dsn = "flanders") %>%
  mutate(gewest = "Vlaams gewest") %>%
  select(gewest)

wnm <- wnm_orig %>%
  select(wnm_id = unieke_id, naam_nl, naam_lat, datum, aantal, methode, kleed, geslacht) %>%
  mutate(jaar = year(datum)) %>%
  mutate(methode = ifelse(methode == "NULL", "onbekend", methode)) %>%
  st_join(vlaanderen) %>%
  filter(!is.na(gewest))

gebieden <- gebieden_orig %>%
  select(metapopulatie = metapop, populatie = pop, eigenaar_beheerder = Eig.Beheer, type_gebied = PROJECT_24, aantal_platen = X..PLATEN) %>%
  mutate(type_gebied = factor(str_trim(type_gebied), levels = c("Meetnet", "Inhaalslag", "Aandachtgebied", "Lage prioriteit")))

platen <- platen_orig %>%
  select(code = Code, gebied = Gebied) %>%
  st_join(vlaanderen) %>%
  filter(!is.na(gewest))

```

## Verkenning ruwe data

We selecteren enkel de data die in Vlaanderen liggen.

### Waarnemingen

@fig-methode toont het aantal waarnemingen per telmethode, met onderscheid tussen nulwaarnemingen en effectieve waarnemingen.
We zien duidelijk een hoog aandeel nulwaarnemingen bij de tellingen via reptielplaten.

```{r}
#| label: fig-methode
#| fig-cap: "Aantal waarnemingen per methode"

wnm %>%
  mutate(nulwaarneming  = aantal == 0) %>%
  ggplot(aes(x = methode, fill = nulwaarneming)) +
  geom_bar()
```
@fig-methode-jaar toont het aantal waarnemingen per methode per jaar.

- Bij de tellingen via reptielenplaten zie we sinds 2022 een groot aantal nulwaarnemingen.
Worden de nulwaarnemingen pas sinds 2022 systematisch ingevoerd?

- Bij de zichttellingen zien we enkel nulwaarnemingen in 2021 en 2022.

- Bij methode 'onbekend' zien we een groot aandeel nulwaarnemingen in 2021 en 2022.
Zijn dit tellingen via reptielenplaten waarbij men de methode heeft vergeten invullen? 


```{r}
#| label: fig-methode-jaar
#| fig-cap: "Aantal waarnemingen per jaar per methode" 

wnm %>%
  filter(methode %in% c("gezien", "onbekend", "reptielenplaat")) %>%
  mutate(nulwaarneming  = aantal == 0) %>%
  ggplot(aes(x = jaar, fill = nulwaarneming)) +
  geom_bar() +
  facet_wrap(~methode, scales = "free", ncol = 2)
```

@tbl-kleed-geslacht geeft het aantal effectieve waarnemingen per combinatie van `kleed` en `geslacht`.

- `kleed` is meestal adult of onbekend
- slechts in enkele gevallen wordt `geslacht` onderscheiden

Deze informatie is weining relevant en zal niet worden gebruikt in verdere analyse.

```{r}
#| label: tbl-kleed-geslacht
#| tbl-cap: Aantal effectieve waarnemingen voor combinaties van methode, kleed en geslacht

wnm %>%
  filter(aantal == 0) %>%
  st_drop_geometry() %>%
  group_by(methode, kleed, geslacht) %>%
  summarise(n_records = n()) %>%
  ungroup() %>%
  datatable(rownames = FALSE,
            filter = "top")
```

### Gebieden en platen

```{r}
platen_populatie <- platen %>%
  st_join(select(gebieden, populatie))

n_platen_pop <- platen_populatie %>%
  st_drop_geometry() %>%
  group_by(populatie) %>%
  summarise(n_platen = n_distinct(code)) %>%
  ungroup() %>%
  mutate(populatie = ifelse(is.na(populatie), "geen populatie afgelijnd", populatie))

gebieden_platen <- gebieden %>%
  left_join(n_platen_pop, by = "populatie") %>%
  mutate(n_platen = ifelse(is.na(n_platen), 0, n_platen))

```

@fig-kaart toont

-   de onderzochte gebieden (populaties)
-   de ligging van de reptielenplaten (enkel deze in Vlaanderen)
-   de waarnemingen van gladde slang sinds 2021 (exclusief nulwaarnemingen)

Platen liggen geclusterd binnen een gebied (transecten).
Voor de analyse is het relevant om die clusters te definiÃ«ren.
Is er informatie over welke platen tot eenzelfde transect behoren?


```{r}
#| label: fig-kaart
#| fig-cap: Ligging gebieden en reptielenplaten

gebieden <- gebieden %>%
  mutate(area_ha = st_area(geometry)) %>%
  ungroup()

aanwezig_2021 <- wnm %>%
  filter(aantal > 0) %>%
  filter(jaar >= 2021)
 
pal <- colorFactor(
  palette = c("blue", "yellow", "red", "orange"),
  domain = gebieden$type_gebied
)

gebieden %>%
  st_transform(crs = 4326) %>%
  leaflet() %>%
  addTiles() %>%
  addPolygons(label = ~populatie, color = ~pal(type_gebied), group = "gebieden") %>%
  addMarkers(data = st_transform(platen, 4326), label = ~code,
             clusterOptions = markerClusterOptions(), group = "platen") %>%
  addCircleMarkers(data = st_transform(aanwezig_2021, crs = 4326), radius = 3, color = "black", stroke = FALSE, opacity = 0.8,
                   label = ~methode, group = "aanwezigheid gladde slang") %>%
  addLegend(pal = pal, values = ~type_gebied,
    title = "Type gebied"
  )  %>%
  addLayersControl(
    overlayGroups = c("gebieden", "platen", "gezien sinds 2021"),
    options = layersControlOptions(collapsed = FALSE)
  )
  
```

@tbl-platen toont het aantal reptielenplaten per gebied/populatie:

-   `n_platen_tabel`: het aantal platen zoals aangegeven in de attributentabel van het bestand `Gladde_Slang_Gebieden_2024.shp`
-   `n_platen_gis`: het aantal platen door een gis-overlay van de platenlaag (`LocatieSlangenplaten2024.shp`) met de gebiedenlaag (`Gladde_Slang_Gebieden_2024.shp`)

Er is vaak een verschil tussen `n_platen_tabel` en `n_platen_gis`:

- `LocatieSlangenplaten2024.shp` bevat nog niet alle platen?
- `n_platen_tabel` niet up to date?

```{r}
#| label: tbl-platen
#| tbl-cap: Aantal reptielenplaten per gebied

gebieden_platen %>%
  st_drop_geometry() %>%
  select(type_gebied, metapopulatie, populatie, n_platen_tabel = aantal_platen, n_platen_gis = n_platen) %>%
  arrange(type_gebied, metapopulatie, populatie) %>%
  datatable(rownames = FALSE,
            filter = "top")
```

Een aantal platen liggen buiten de gebiedenlaag (@tbl-platen-buiten).

```{r}
#| label: tbl-platen-buiten
#| tbl-cap: Reptielenplaten die niet in gebiedenlaag liggen

platen_populatie %>%
  st_drop_geometry() %>%
  filter(is.na(populatie)) %>%
  select(code, gebied) %>%
  datatable(rownames = FALSE,
            filter = "top")
```

## Aantallen per gebied

### Totale aantallen

```{r}
wnm_populatie <- wnm %>%
  st_join(gebieden) %>%
  st_drop_geometry() %>%
  group_by(naam_nl, metapopulatie, populatie, type_gebied) %>%
  mutate(aantal_tot = sum(aantal),
            aanwezig_hist = aantal_tot > 0,
            n_wnm_tot = n()) %>%
  ungroup() %>%
  group_by(naam_nl, metapopulatie, populatie, type_gebied, aantal_tot, aanwezig_hist, n_wnm_tot) %>%
  filter(jaar >= 2021) %>%
  summarise(aantal_sinds_2021 = sum(aantal),
            aanwezig_sinds_2021 = sum(aantal) > 0,
            n_wnm_sinds_2021 = n()) %>%
  ungroup()
```

@tbl-aantallen-gebied tonen de totale aantallen en het aantal waarnemingen per gebied:

-   voor de volledige tijdreeks
-   voor de periode vanaf 2021

```{r}
#| label: tbl-aantallen-gebied
#| tbl-cap: Aantallen per gebied

wnm_populatie %>%
  select(type_gebied, metapopulatie, populatie, "aantal tot" = aantal_tot, "aantal sinds 2021" = aantal_sinds_2021, 
         "n wnm tot" = n_wnm_tot, "n wnm sinds 2021" = n_wnm_sinds_2021) %>%
  arrange(type_gebied, metapopulatie, populatie) %>%
  datatable(rownames = FALSE,
            filter = "top")
```
### Aantallen per jaar

```{r}
aantal_gebied_jaar <- wnm %>%
  st_join(gebieden) %>%
  st_drop_geometry() %>%
   filter(jaar >= 2022) %>%
  group_by(naam_nl, metapopulatie, populatie, type_gebied, methode, jaar) %>%
  summarise(aantal_jaar = sum(aantal),
            n_aanwezig = sum(aantal > 0),
            n_afwezig = sum(aantal == 0),
            n_wnm = n()) %>%
  ungroup()

aantal_methode_jaar <- aantal_gebied_jaar %>%
  mutate(eenheid_zoekinspanning = ifelse(methode == "reptielenplaat", 100, 10)) %>%
  group_by(naam_nl, jaar, methode, eenheid_zoekinspanning, type_gebied) %>%
  summarise(totaal = sum(aantal_jaar),
            relatief = sum(aantal_jaar) / (sum(n_wnm / eenheid_zoekinspanning) ),
            n_wnm = sum(n_wnm)) %>%
  ungroup()

aantal_meetnet <- aantal_methode_jaar %>%
  filter(type_gebied == "Meetnet") %>%
  filter(methode %in% c("gezien", "reptielenplaat", "onbekend")) %>%
  pivot_longer(cols = c(totaal, relatief),
               names_to = "variabele",
               values_to = "aantal")

aantal_meta_methode_jaar <- aantal_gebied_jaar %>%
  mutate(eenheid_zoekinspanning = ifelse(methode == "reptielenplaat", 100, 10)) %>%
  group_by(naam_nl, jaar, metapopulatie, methode, eenheid_zoekinspanning, type_gebied) %>%
  summarise(totaal = sum(aantal_jaar),
            relatief = sum(aantal_jaar) / (sum(n_wnm / eenheid_zoekinspanning) ),
            n_wnm = sum(n_wnm)) %>%
  ungroup()

aantal_meta_meetnet <- aantal_meta_methode_jaar %>%
  filter(type_gebied == "Meetnet") %>%
  filter(methode %in% c("gezien", "reptielenplaat", "onbekend")) %>%
  pivot_longer(cols = c(totaal, relatief),
               names_to = "variabele",
               values_to = "aantal")
```

@fig-aantal-jaar toont de totale aantallen en de relatieve aantallen per jaar voor de meetnetgebieden.
De relatieve aantallen houden rekening met de zoekinspanning en drukken we uit als volgt:

+ voor de platentellingen: totaal aantal gladde slangen per **100** waarnemingen (inclusief nulwaarnemingen)
+ voor de methode `onbekend` of `gezien`: totaal aantal gladde slangen per **10** waarnemingen (inclusief nulwaarnemingen)

```{r}
#| label: fig-aantal-jaar
#| fig-cap: "Totale en relatieve aantallen van gladde slang in de meetnet gebieden voor de verschillende methodes"


aantal_meetnet %>%
  ggplot(aes(x = factor(jaar), y = aantal, colour = methode, group = methode)) +
  geom_point() +
  geom_line() +
  lims(y = c(0, NA)) +
  labs(x = "Jaar", y = "Aantal gladde slang") +
  facet_wrap( ~ variabele, scales = "free")
```

@fig-aantal-meta-jaar toont de relatieve aantallen per jaar voor de metapopulaties.
De nulwaarnemingen van 2023 in Helchteren en van 2022 in Kalmthoutse heide ontbreken in de dataset.

```{r}
#| label: fig-aantal-meta-jaar
#| fig-cap: "Relatieve aantallen van gladde slang per metapopulatie in de meetnet gebieden voor de verschillende methodes"

aantal_meta_meetnet %>%
  filter(! metapopulatie %in% "Tiendeberg") %>%
  filter(variabele == "relatief") %>%
  ggplot(aes(x = factor(jaar), y = aantal, colour = methode, group = methode)) +
  geom_point() +
  geom_line() +
  lims(y = c(0, NA)) +
  labs(x = "Jaar", y = "Aantal gladde slang") +
  facet_wrap(~ metapopulatie, scales = "free")
```


## Koppeling waarnemingen aan platen

De waarnemingen bevatten geen informatie over welke plaat werd onderzocht.
We proberen de waarnemingen te koppelen aan de platen op basis van de afstand tot de dichtst bijzijnde plaat.

```{r}
#| label: calc-afstand-platen
#| cache: true

platen_buffer <- platen %>%
  st_buffer(dist = 25) %>%
  select(code_buffer = code)

platen_aggr <- platen %>%
  summarise(n_platen = n()) %>%
  ungroup()

wnm_sind2021_plaat <- wnm %>%
  filter(jaar >= 2021) %>%
  st_join(platen_buffer) %>%
  st_join(select(gebieden, metapopulatie, populatie, type_gebied)) %>%
  st_join(select(platen_populatie, code, populatie_plaat = populatie), join = st_nearest_feature)

check <- wnm_sind2021_plaat %>%
  filter(populatie_plaat != populatie)

# wnm > 25m van een plaat
wnm_sind2021_zonderplaat <- wnm_sind2021_plaat %>%
  filter(is.na(code_buffer)) %>%
  st_drop_geometry()

# wnm < 25m van een plaat
wnm_sind2021_plaat <- wnm_sind2021_plaat %>%
  filter(!is.na(code_buffer)) %>%
  group_by(wnm_id) %>%
  mutate(dist_plaat = min(st_distance(geometry, platen_aggr))) %>%
  ungroup() %>%
  st_drop_geometry()

wnm_sind2021_all <- wnm_sind2021_plaat %>%
  filter(populatie_plaat == populatie) %>%
  filter(code_buffer == code) %>%
  bind_rows(wnm_sind2021_zonderplaat) %>%
  mutate(dist_plaat_m = drop_units(dist_plaat),
         afstand_plaat = ifelse(is.na(dist_plaat_m), "> 25 m",
                                ifelse(dist_plaat_m <= 1, "<= 1 m",
                                       ifelse(dist_plaat_m <= 5, "1-5 m",
                                              ifelse(dist_plaat_m <= 10, "5-10 m",
                                                     ifelse(dist_plaat_m <= 25, "10-25 m", NA))))),
         afstand_plaat = factor(afstand_plaat, levels = c("<= 1 m", "1-5 m", "5-10 m", "10-25 m", "> 25 m"),
                                ordered = TRUE))
  
```

In @fig-verdeling geven we een overzicht van de afstanden tussen de waarnemingen en de dichtst bijzijnde reptielenplaat.

```{r}
#| label: fig-verdeling
#| fig-cap: "Verdeling afstand van waarneming tot een reptielenplaat voor verschillende methodes"

wnm_sind2021_all %>%
  filter(methode %in% c("gezien", "onbekend", "reptielenplaat")) %>%
  mutate(nulwaarneming = aantal == 0) %>%
  ggplot(aes(x = afstand_plaat, fill = nulwaarneming)) +
  geom_bar() +
  facet_wrap(~methode, ncol = 2) +
  labs(x = "Afstand tot dichtste reptielenplaat",
       y = "Aantal waarnemingen") +
  theme(axis.text.x = element_text(angle = 90))
```

Er zijn een groot aantal waarnemingen die op meer dan 25 meter afstand van een reptielenplaat liggen.

Problemen:

-   Er ontbreken waarschijnlijk platen in de platen gis-laag
-   De locaties van de waarnemingen zijn waarschijnlijk niet altijd nauwkeurig
-   De telmethode is niet altijd vermeld

```{r}
gebieden_afstand <- wnm_sind2021_all %>%
  filter(methode == "reptielenplaat") %>%
  group_by(populatie) %>%
  mutate(n_wnm_totaal = n()) %>%
  ungroup() %>%
  group_by(type_gebied, populatie, afstand_plaat, n_wnm_totaal) %>%
  summarise(n_wnm = n(),
            n_platen_afstand = n_distinct(code)) %>%
  ungroup() %>%
  mutate(prop_wnm = round(n_wnm / n_wnm_totaal, 2)) %>%
  select(type_gebied, populatie, afstand_plaat, n_wnm_totaal, prop_wnm, n_platen_afstand) %>%
  left_join(n_platen_pop, by = "populatie") %>%
  mutate(n_platen_gis = ifelse(is.na(n_platen), 0, n_platen))

gebieden_afstand_wide <- gebieden_afstand %>%
  select(populatie, n_wnm = n_wnm_totaal, n_platen = n_platen_gis, afstand_plaat, prop_wnm) %>%
  pivot_wider(names_from = "afstand_plaat", values_from = "prop_wnm", values_fill = 0)
  
```

In @tbl-afstand-gebied geven we een overzicht van de situatie per gebied. Per gebied kijken we naar de verdeling van de afstand tussen de waarnemingen en de platen. We gebruiken hiervoor enkel de waarnemingen met telmethode `reptielenplaat.` Hoe hoger de proportie van de waarnemingen met een afstand \> 25 m tot de dichtst bijzijnde plaat, hoe groter de kans dat er platen ontbreken in de gis-laag.

```{r}
#| label: tbl-afstand-gebied
#| tbl-cap: "Overzicht per gebied van afstanden tussen waarnemingen en platen"

gebieden_afstand_wide %>%
  filter(!is.na(populatie)) %>%
  arrange(desc(`> 25 m`)) %>%
  datatable(rownames = FALSE, filter = "top")
```

Voor verdere analyse selecteren we voorlopig enkel:

-   waarnemingen op een afstand van minder dan 25 m tot de dichtstbijzijnde reptielenplaat
-   waarnemingen sinds 2022

```{r}
wnm_analyse <- wnm_sind2021_all %>%
  group_by(populatie, jaar) %>%
  mutate(aanwezig_gebied = sum(aantal) > 0) %>%
  ungroup() %>%
  filter(jaar >= 2022) %>%
  filter(afstand_plaat %in% c("< 1 m", "1-5 m", "5-10 m", "10 - 25 m")) %>%
  select(wnm_id, type_gebied, metapopulatie, populatie, aanwezig_gebied, code_plaat = code, jaar, datum, dist_plaat_m, afstand_plaat, methode, naam_nl, aantal)
  
gebieden_analyse <- wnm_sind2021_all %>%
  group_by(type_gebied, metapopulatie, jaar) %>%
  summarise(aanwezig = sum(aantal) > 0,
         aantal_gebied = sum(aantal),
         bezoeken = n(),
         bezoeken_aanwezig = sum(aantal > 0)) %>%
  ungroup() 
```

## Aandeel platen met detectie gladde slang

We bepalen het aandeel van de platen met detectie van gladde slang per jaar en per metapopulatie.
We rekenen hiervoor enkel de platen mee die in een gebied liggen waar de gladde slang werd waargenomen in dat jaar.

We doen dit voor verschillende maten van `zoekinspanning`:

+ `bezocht`: aantal platen met minstens Ã©Ã©n bezoek in een jaar
+ `voldoende_onderzocht_5`: aantal platen met minstens 5 bezoeken of met detectie van gladde slang 
+ `voldoende_onderzocht_7`: aantal platen met minstens 7 bezoeken of met detectie van gladde slang 

Ten slotte doen we dit ook voor twee datasets

+ enkel waarnemingen met methode = `reptielenplaat` (op afstand < 25m van een plaat)
+ alle waarnemingen (op afstand < 25m van een plaat)

### Enkel waarnemingen met methode = `reptielenplaat`

```{r}
platen_meta_jaar <- wnm_analyse %>%
  filter(methode == "reptielenplaat") %>%
  group_by(type_gebied, metapopulatie, populatie, aanwezig_gebied, code_plaat, jaar, datum) %>%
  summarise(aanwezig_bezoek = sum(aantal) > 0,
            aantal_bezoek = sum(aantal)) %>%
  ungroup() %>%
  group_by(type_gebied, metapopulatie, populatie, code_plaat, jaar, aanwezig_gebied) %>%
  summarise(aanwezig_jaar = sum(aantal_bezoek) > 0,
            n_bezoeken = n_distinct(datum),
            n_aanwezig = sum(aantal_bezoek > 0)) %>%
  ungroup()

prop_platen_meta <- platen_meta_jaar %>%
  group_by(metapopulatie) %>%
  mutate(n_platen_tot = n_distinct(code_plaat)) %>%
  ungroup() %>%
  filter(aanwezig_gebied) %>%
  group_by(type_gebied, metapopulatie, n_platen_tot, jaar) %>%
  summarise(n_aanwezig = sum(aanwezig_jaar),
            voldoende_onderzocht_5 = sum(n_bezoeken >= 5 | aanwezig_jaar),
            voldoende_onderzocht_7 = sum(n_bezoeken >= 7 | aanwezig_jaar),
            bezocht = n_distinct(code_plaat)) %>%
  ungroup() %>%
  filter(type_gebied == "Meetnet") %>%
  pivot_longer(cols = c(bezocht, voldoende_onderzocht_5, voldoende_onderzocht_7),
               names_to = "zoekinspanning",
               values_to = "n_platen") %>%
  mutate(prop_detectie = n_aanwezig/ n_platen)

prop_platen <- platen_meta_jaar %>%
  group_by(jaar) %>%
  mutate(n_platen_tot = n_distinct(code_plaat)) %>%
  ungroup() %>%
  filter(aanwezig_gebied) %>%
  group_by(type_gebied, n_platen_tot, jaar) %>%
  summarise(n_aanwezig = sum(aanwezig_jaar),
            voldoende_onderzocht_5 = sum(n_bezoeken >= 5 | aanwezig_jaar),
            voldoende_onderzocht_7 = sum(n_bezoeken >= 7 | aanwezig_jaar),
            bezocht = n_distinct(code_plaat)) %>%
  ungroup() %>%
  filter(type_gebied == "Meetnet") %>%
  pivot_longer(cols = c(bezocht, voldoende_onderzocht_5, voldoende_onderzocht_7),
               names_to = "zoekinspanning",
               values_to = "n_platen") %>%
  mutate(prop_detectie = n_aanwezig/ n_platen)
  
```
@fig-prop-detectie toont het aandeel van de platen met detectie van gladde slang per jaar voor verschillende zoekinspanningen.
Ook het totaal aantal platen per zoekinspanning wordt weergegeven. 

```{r}
#| label: fig-prop-detectie
#| fig-cap: Aandeel van de bezochte platen platen met detectie van gladde slang voor verschillende zoekinsapnningen. De getallen tonen het aantal platen per zoekinspanning.

prop_platen %>%
  ggplot(aes(x = factor(jaar), y = prop_detectie, label = n_platen, colour = zoekinspanning, shape = zoekinspanning)) +
  geom_point(size = 3, alpha = 0.6) +
  geom_text(vjust = 0, nudge_y = 0.02) +
  labs(x = "Jaar", y = "Aandeel van platen met detectie") +
  lims(y = c(0,1))
```

@fig-prop-detectie-meta toont het aandeel van de platen met detectie van gladde slang per metatpopulatie.

```{r}
#| label: fig-prop-detectie-meta
#| fig-cap: Aandeel van de bezochte platen en voldoende onderzochte platen met detectie van gladde slang per metapopulatie

prop_platen_meta %>%
  ggplot(aes(x = factor(jaar), y = prop_detectie, colour = zoekinspanning, shape = zoekinspanning)) +
  geom_point(size = 2, alpha = 0.6) +
  labs(x = "Jaar", y = "Aandeel van platen met detectie") +
  facet_wrap(~ str_c(metapopulatie, " (", n_platen_tot, ")"))
```

### Alle waarnemingen op afstand < 25  van reptielenplaat

```{r}
platen_meta_jaar <- wnm_analyse %>%
  group_by(type_gebied, metapopulatie, populatie, aanwezig_gebied, code_plaat, jaar, datum) %>%
  summarise(aanwezig_bezoek = sum(aantal) > 0,
            aantal_bezoek = sum(aantal)) %>%
  ungroup() %>%
  group_by(type_gebied, metapopulatie, populatie, code_plaat, jaar, aanwezig_gebied) %>%
  summarise(aanwezig_jaar = sum(aantal_bezoek) > 0,
            n_bezoeken = n_distinct(datum),
            n_aanwezig = sum(aantal_bezoek > 0)) %>%
  ungroup()

prop_platen_meta <- platen_meta_jaar %>%
  group_by(metapopulatie) %>%
  mutate(n_platen_tot = n_distinct(code_plaat)) %>%
  ungroup() %>%
  filter(aanwezig_gebied) %>%
  group_by(type_gebied, metapopulatie, n_platen_tot, jaar) %>%
  summarise(n_aanwezig = sum(aanwezig_jaar),
            voldoende_onderzocht_5 = sum(n_bezoeken >= 5 | aanwezig_jaar),
            voldoende_onderzocht_7 = sum(n_bezoeken >= 7 | aanwezig_jaar),
            bezocht = n_distinct(code_plaat)) %>%
  ungroup() %>%
  filter(type_gebied == "Meetnet") %>%
  pivot_longer(cols = c(bezocht, voldoende_onderzocht_5, voldoende_onderzocht_7),
               names_to = "zoekinspanning",
               values_to = "n_platen") %>%
  mutate(prop_detectie = n_aanwezig/ n_platen)

prop_platen <- platen_meta_jaar %>%
  group_by(jaar) %>%
  mutate(n_platen_tot = n_distinct(code_plaat)) %>%
  ungroup() %>%
  filter(aanwezig_gebied) %>%
  group_by(type_gebied, n_platen_tot, jaar) %>%
  summarise(n_aanwezig = sum(aanwezig_jaar),
            voldoende_onderzocht_5 = sum(n_bezoeken >= 5 | aanwezig_jaar),
            voldoende_onderzocht_7 = sum(n_bezoeken >= 7 | aanwezig_jaar),
            bezocht = n_distinct(code_plaat)) %>%
  ungroup() %>%
  filter(type_gebied == "Meetnet") %>%
  pivot_longer(cols = c(bezocht, voldoende_onderzocht_5, voldoende_onderzocht_7),
               names_to = "zoekinspanning",
               values_to = "n_platen") %>%
  mutate(prop_detectie = n_aanwezig/ n_platen)
  
```
@fig-prop-detectie-2 toont het aandeel van de platen met detectie van gladde slang per jaar voor verschillende zoekinspanningen.
Ook het totaal aantal platen per zoekinspanning wordt weergegeven. 

```{r}
#| label: fig-prop-detectie-2
#| fig-cap: Aandeel van de bezochte platen platen met detectie van gladde slang voor verschillende zoekinsapnningen. De getallen tonen het aantal platen per zoekinspanning.

prop_platen %>%
  ggplot(aes(x = factor(jaar), y = prop_detectie, label = n_platen, colour = zoekinspanning, shape = zoekinspanning)) +
  geom_point(size = 3, alpha = 0.6) +
  geom_text(vjust = 0, nudge_y = 0.02) +
  labs(x = "Jaar", y = "Aandeel van platen met detectie") +
  lims(y = c(0,1))
```

@fig-prop-detectie-meta-2 toont het aandeel van de platen met detectie van gladde slang per metatpopulatie.

```{r}
#| label: fig-prop-detectie-meta-2
#| fig-cap: Aandeel van de bezochte platen en voldoende onderzochte platen met detectie van gladde slang per metapopulatie

prop_platen_meta %>%
  ggplot(aes(x = factor(jaar), y = prop_detectie, colour = zoekinspanning, shape = zoekinspanning)) +
  geom_point(size = 2, alpha = 0.6) +
  labs(x = "Jaar", y = "Aandeel van platen met detectie") +
  facet_wrap(~ str_c(metapopulatie, " (", n_platen_tot, ")"))
```

## Detectiekans


```{r}
platen_jaar_all <- wnm_analyse %>%
  group_by(type_gebied, metapopulatie, populatie, code_plaat, jaar, datum, aanwezig_gebied) %>%
  summarise(aanwezig_bezoek = sum(aantal) > 0,
            aantal_bezoek = sum(aantal)) %>%
  ungroup() %>%
  group_by(type_gebied, metapopulatie, populatie, code_plaat, jaar, aanwezig_gebied) %>%
  summarise(aanwezig_jaar = sum(aantal_bezoek) > 0,
            n_bezoeken = n_distinct(datum),
            n_aanwezig = sum(aantal_bezoek > 0)) %>%
  ungroup() %>%
  mutate(prop_aanwezig = n_aanwezig / n_bezoeken)

detectiekans_glob_all <- platen_jaar_all %>%
  filter(aanwezig_gebied) %>%
  group_by(type_gebied, jaar) %>%
  summarise(mean_det_rate = mean(prop_aanwezig),
            n_platen = n_distinct(code_plaat),
            n_bezoeken = sum(n_bezoeken)) %>%
  ungroup()

detectiekans_meta_all <- platen_jaar_all %>%
  filter(aanwezig_gebied) %>%
  group_by(type_gebied, metapopulatie) %>%
  summarise(mean_det_rate = mean(prop_aanwezig),
            n_platen = n_distinct(code_plaat),
            n_bezoeken = sum(n_bezoeken)) %>%
  ungroup()

```

De detectiekans is de kans dat een gladde slang waargenomen wordt in als de soort aanwezig is (voor een bepaald jaar).
We beschouwen de soort aanwezig als die wordt waargenomen binnen het gebied via gelijk welke methode.
De detectiekans kunnen we dan berekenen als de verhouding tussen:

+ het aantal bezoeken met een effectieve waarneming van de soort
+ het totaal aantal bezoeken (voor de jaren en gebieden waarin de soort aanwezig is)


```{r}
platen_jaar <- wnm_analyse %>%
  filter(methode == "reptielenplaat") %>%
  group_by(type_gebied, metapopulatie, populatie, code_plaat, jaar, datum, aanwezig_gebied) %>%
  summarise(aanwezig_bezoek = sum(aantal) > 0,
            aantal_bezoek = sum(aantal)) %>%
  ungroup() %>%
  group_by(type_gebied, metapopulatie, populatie, code_plaat, jaar, aanwezig_gebied) %>%
  summarise(aanwezig_jaar = sum(aantal_bezoek) > 0,
            n_bezoeken = n_distinct(datum),
            n_aanwezig = sum(aantal_bezoek > 0)) %>%
  ungroup() %>%
  mutate(prop_aanwezig = n_aanwezig / n_bezoeken)

detectiekans_glob <- platen_jaar %>%
  filter(aanwezig_gebied) %>%
  filter(type_gebied == "Meetnet") %>%
  group_by(type_gebied, jaar) %>%
  summarise(detectiekans_1 = round(mean(prop_aanwezig), 3),
            n_platen = n_distinct(code_plaat),
            n_bezoeken = sum(n_bezoeken)) %>%
  ungroup() %>%
  mutate(detectiekans_5 = round(1 - (1 - detectiekans_1) ^ 5, 2),
         detectiekans_7 = round(1 - (1 - detectiekans_1) ^ 7, 2),
         methode = "reptielenplaat")
  
detectiekans_meta <- platen_jaar %>%
  filter(aanwezig_gebied) %>%
  filter(type_gebied == "Meetnet") %>%
  group_by(type_gebied, metapopulatie, jaar) %>%
  summarise(detectiekans_1 = round(mean(prop_aanwezig), 3),
            n_platen = n_distinct(code_plaat),
            n_bezoeken = sum(n_bezoeken)) %>%
  ungroup() %>%
  mutate(detectiekans_5 = round(1 - (1 - detectiekans_1) ^ 5, 2),
         detectiekans_7 = round(1 - (1 - detectiekans_1) ^ 7, 2))

```
```{r}
platen_jaar_all <- wnm_analyse %>%
  group_by(type_gebied, metapopulatie, populatie, code_plaat, jaar, datum, aanwezig_gebied) %>%
  summarise(aanwezig_bezoek = sum(aantal) > 0,
            aantal_bezoek = sum(aantal)) %>%
  ungroup() %>%
  group_by(type_gebied, metapopulatie, populatie, code_plaat, jaar, aanwezig_gebied) %>%
  summarise(aanwezig_jaar = sum(aantal_bezoek) > 0,
            n_bezoeken = n_distinct(datum),
            n_aanwezig = sum(aantal_bezoek > 0)) %>%
  ungroup() %>%
  mutate(prop_aanwezig = n_aanwezig / n_bezoeken)

detectiekans_glob_all <- platen_jaar_all %>%
  filter(aanwezig_gebied) %>%
  filter(type_gebied == "Meetnet") %>%
  group_by(type_gebied, jaar) %>%
  summarise(detectiekans_1 = round(mean(prop_aanwezig), 3),
            n_platen = n_distinct(code_plaat),
            n_bezoeken = sum(n_bezoeken)) %>%
  ungroup() %>%
  mutate(detectiekans_5 = round(1 - (1 - detectiekans_1) ^ 5, 2),
         detectiekans_7 = round(1 - (1 - detectiekans_1) ^ 7, 2),
         methode = "alle wnm")

platen_jaar_onb_plaat <- wnm_analyse %>%
  filter(methode != "gezien") %>%
  group_by(type_gebied, metapopulatie, populatie, code_plaat, jaar, datum, aanwezig_gebied) %>%
  summarise(aanwezig_bezoek = sum(aantal) > 0,
            aantal_bezoek = sum(aantal)) %>%
  ungroup() %>%
  group_by(type_gebied, metapopulatie, populatie, code_plaat, jaar, aanwezig_gebied) %>%
  summarise(aanwezig_jaar = sum(aantal_bezoek) > 0,
            n_bezoeken = n_distinct(datum),
            n_aanwezig = sum(aantal_bezoek > 0)) %>%
  ungroup() %>%
  mutate(prop_aanwezig = n_aanwezig / n_bezoeken)

detectiekans_onb_plaat <- platen_jaar_onb_plaat %>%
  filter(aanwezig_gebied) %>%
  filter(type_gebied == "Meetnet") %>%
  group_by(type_gebied, jaar) %>%
  summarise(detectiekans_1 = round(mean(prop_aanwezig), 3),
            n_platen = n_distinct(code_plaat),
            n_bezoeken = sum(n_bezoeken)) %>%
  ungroup() %>%
  mutate(detectiekans_5 = round(1 - (1 - detectiekans_1) ^ 5, 2),
         detectiekans_7 = round(1 - (1 - detectiekans_1) ^ 7, 2),
         methode = "reptielenplaat + onbekend")

```
@tbl-dr toont de detectiekans voor 1 bezoek (`dr_1`) en de afgeleide detectiekans in geval van 5 bezoeken (`dr_5`) en 7 bezoeken (`dr_7`) per plaat.
De detectiekans berekenen we voor verschillende datasets:

+ enkel waarnemingen met methode `reptielenplaat`
+ enkel waarnemingen met methode `reptielenplaat` en `onbekend`
+ alle methodes

We selecteren enkel de waarnemingen op een afstand < 25m van een reptielenplaat.


```{r}
#| label: tbl-dr
#| tbl-cap: Gemiddelde detectiekans voor 1 bezoek, 5 bezoeken en 7 bezoeken

detectiekans_glob %>%
  bind_rows(detectiekans_onb_plaat) %>%
  bind_rows(detectiekans_glob_all) %>%
  select(methode, jaar, n_bezoeken, dr_1 = detectiekans_1, dr_5 = detectiekans_5, dr_7 = detectiekans_7) %>%
  datatable(rownames = FALSE,
            filter = "top")
```




```
